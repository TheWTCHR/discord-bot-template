{"version":3,"file":"Event.js","sourceRoot":"","sources":["../../src/types/Event.ts"],"names":[],"mappings":";;;AAwGA,MAAa,QAAQ;IACV,IAAI,CAAU;IACvB,KAAK,CAAuB;IAC5B,WAAW,CAAsD;IACjE,EAAE,CAAU;IACZ,IAAI,CAAS;IACb,SAAS,CAA0B;IACnC,OAAO,CAAW;IAClB,GAAG,CAAkB;IACrB,YAAY,GAAoB,EAAE,GAAiC;QACjE,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;QACpB,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAW,CAAC;QAC5B,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,IAAI,KAAK,CAAC;QACpC,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,WAAW,IAAI,gBAAgB,CAAC;IACzD,CAAC;CACF;AAnBD,4BAmBC","sourcesContent":["import Discord from \"discord.js\";\r\nimport { NamespaceEnums, NamespaceData } from \"../../generated/namespaceData\";\r\nimport { DBI, DBIClientData } from \"../DBI\";\r\nimport { DBILocale } from \"./Locale\";\r\n\r\nexport interface ClientEvents {\r\n  applicationCommandPermissionsUpdate: { data: Discord.ApplicationCommandPermissionsUpdateData };\r\n  cacheSweep: { message: string };\r\n  channelCreate: { channel: Discord.NonThreadGuildBasedChannel };\r\n  channelDelete: { channel: Discord.DMChannel | Discord.NonThreadGuildBasedChannel };\r\n  channelPinsUpdate: { channel: Discord.TextBasedChannel, date: Date };\r\n  channelUpdate: {\r\n    oldChannel: Discord.DMChannel | Discord.NonThreadGuildBasedChannel,\r\n    newChannel: Discord.DMChannel | Discord.NonThreadGuildBasedChannel,\r\n  };\r\n  debug: { message: string };\r\n  warn: { message: string };\r\n  emojiCreate: { emoji: Discord.GuildEmoji };\r\n  emojiDelete: { emoji: Discord.GuildEmoji };\r\n  emojiUpdate: { oldEmoji: Discord.GuildEmoji, newEmoji: Discord.GuildEmoji };\r\n  error: { error: Error };\r\n  guildBanAdd: { ban: Discord.GuildBan };\r\n  guildBanRemove: { ban: Discord.GuildBan };\r\n  guildCreate: { guild: Discord.Guild };\r\n  guildDelete: { guild: Discord.Guild };\r\n  guildUnavailable: { guild: Discord.Guild };\r\n  guildIntegrationsUpdate: { guild: Discord.Guild };\r\n  guildMemberAdd: { member: Discord.GuildMember };\r\n  guildMemberAvailable: { member: Discord.GuildMember | Discord.PartialGuildMember };\r\n  guildMemberRemove: { member: Discord.GuildMember | Discord.PartialGuildMember };\r\n  guildMembersChunk: {\r\n    members: Discord.Collection<Discord.Snowflake, Discord.GuildMember>,\r\n    guild: Discord.Guild,\r\n    data: { count: number; index: number; nonce: string | undefined },\r\n  };\r\n  guildMemberUpdate: { oldMember: Discord.GuildMember | Discord.PartialGuildMember, newMember: Discord.GuildMember };\r\n  guildUpdate: { oldGuild: Discord.Guild, newGuild: Discord.Guild };\r\n  inviteCreate: { invite: Discord.Invite };\r\n  inviteDelete: { invite: Discord.Invite };\r\n  messageCreate: { message: Discord.Message };\r\n  messageDelete: { message: Discord.Message | Discord.PartialMessage };\r\n  messageReactionRemoveAll: {\r\n    message: Discord.Message | Discord.PartialMessage,\r\n    reactions: Discord.Collection<string | Discord.Snowflake, Discord.MessageReaction>,\r\n  };\r\n  messageReactionRemoveEmoji: { reaction: Discord.MessageReaction | Discord.PartialMessageReaction };\r\n  messageDeleteBulk: { messages: Discord.Collection<Discord.Snowflake, Discord.Message | Discord.PartialMessage>, channel: Discord.TextBasedChannel };\r\n  messageReactionAdd: { reaction: Discord.MessageReaction | Discord.PartialMessageReaction, user: Discord.User | Discord.PartialUser };\r\n  messageReactionRemove: { reaction: Discord.MessageReaction | Discord.PartialMessageReaction, user: Discord.User | Discord.PartialUser };\r\n  messageUpdate: { oldMessage: Discord.Message | Discord.PartialMessage, newMessage: Discord.Message | Discord.PartialMessage };\r\n  presenceUpdate: { oldPresence: Discord.Presence | null, newPresence: Discord.Presence };\r\n  ready: { client: Discord.Client<true> };\r\n  invalidated: {};\r\n  roleCreate: { role: Discord.Role };\r\n  roleDelete: { role: Discord.Role };\r\n  roleUpdate: { oldRole: Discord.Role, newRole: Discord.Role };\r\n  threadCreate: { thread: Discord.AnyThreadChannel, newlyCreated: boolean };\r\n  threadDelete: { thread: Discord.AnyThreadChannel };\r\n  threadListSync: { threads: Discord.Collection<Discord.Snowflake, Discord.AnyThreadChannel>, guild: Discord.Guild };\r\n  threadMemberUpdate: { oldMember: Discord.ThreadMember, newMember: Discord.ThreadMember };\r\n  threadMembersUpdate: {\r\n    addedMembers: Discord.Collection<Discord.Snowflake, Discord.ThreadMember>,\r\n    removedMembers: Discord.Collection<Discord.Snowflake, Discord.ThreadMember | Discord.PartialThreadMember>,\r\n    thread: Discord.AnyThreadChannel,\r\n  };\r\n  threadUpdate: { oldThread: Discord.AnyThreadChannel, newThread: Discord.AnyThreadChannel };\r\n  typingStart: { typing: Discord.Typing };\r\n  userUpdate: { oldUser: Discord.User | Discord.PartialUser, newUser: Discord.User };\r\n  voiceStateUpdate: { oldState: Discord.VoiceState, newState: Discord.VoiceState };\r\n  webhookUpdate: { channel: Discord.TextChannel | Discord.NewsChannel | Discord.VoiceChannel };\r\n  interactionCreate: { interaction: Discord.Interaction };\r\n  shardDisconnect: { closeEvent: Discord.CloseEvent, shardId: number };\r\n  shardError: { error: Error, shardId: number };\r\n  shardReady: { shardId: number, unavailableGuilds: Set<Discord.Snowflake> | undefined };\r\n  shardReconnecting: { shardId: number };\r\n  shardResume: { shardId: number, replayedEvents: number };\r\n  stageInstanceCreate: { stageInstance: Discord.StageInstance };\r\n  stageInstanceUpdate: { oldStageInstance: Discord.StageInstance | null, newStageInstance: Discord.StageInstance };\r\n  stageInstanceDelete: { stageInstance: Discord.StageInstance };\r\n  stickerCreate: { sticker: Discord.Sticker };\r\n  stickerDelete: { sticker: Discord.Sticker };\r\n  stickerUpdate: { oldSticker: Discord.Sticker, newSticker: Discord.Sticker };\r\n  guildScheduledEventCreate: { guildScheduledEvent: Discord.GuildScheduledEvent };\r\n  guildScheduledEventUpdate: {\r\n    oldGuildScheduledEvent: Discord.GuildScheduledEvent | null,\r\n    newGuildScheduledEvent: Discord.GuildScheduledEvent,\r\n  };\r\n  guildScheduledEventDelete: { guildScheduledEvent: Discord.GuildScheduledEvent };\r\n  guildScheduledEventUserAdd: { guildScheduledEvent: Discord.GuildScheduledEvent, user: Discord.User };\r\n  guildScheduledEventUserRemove: { guildScheduledEvent: Discord.GuildScheduledEvent, user: Discord.User };\r\n  autoModerationRuleCreate: { autoModerationRule: Discord.AutoModerationRule; };\r\n  autoModerationRuleDelete: { autoModerationRule: Discord.AutoModerationRule; };\r\n  autoModerationRuleUpdate: { oldAutoModerationRule: Discord.AutoModerationRule | null; newAutoModerationRule: Discord.AutoModerationRule; };\r\n}\r\n\r\nexport type DBIEventCombinations<TNamespace extends NamespaceEnums> = {\r\n  [K in keyof (ClientEvents & NamespaceData[TNamespace][\"customEvents\"])]: {\r\n    name: K,\r\n    onExecute: (ctx: (ClientEvents & NamespaceData[TNamespace][\"customEvents\"])[K] & { other: Record<string, any>, locale?: { guild: DBILocale<TNamespace> }, eventName: string, nextClient: DBIClientData<TNamespace> }) => Promise<any> | any\r\n  }\r\n}[keyof (ClientEvents) | keyof NamespaceData[TNamespace][\"customEvents\"]];\r\n\r\nexport type TDBIEventOmitted<TNamespace extends NamespaceEnums> = Omit<DBIEvent<TNamespace>, \"type\" | \"name\" | \"onExecute\" | \"client\" | \"dbi\"> & DBIEventCombinations<TNamespace>;\r\n\r\nexport class DBIEvent<TNamespace extends NamespaceEnums> {\r\n  readonly type: \"Event\";\r\n  other?: Record<string, any>;\r\n  triggerType?: \"OneByOne\" | \"OneByOneGlobal\" | \"Random\" | \"First\";\r\n  id?: string;\r\n  name: string;\r\n  onExecute: (...args: any[]) => any;\r\n  ordered?: boolean;\r\n  dbi: DBI<TNamespace>;\r\n  constructor(dbi: DBI<TNamespace>, cfg: TDBIEventOmitted<TNamespace>) {\r\n    this.dbi = dbi;\r\n    this.type = \"Event\";\r\n    this.id = cfg.id;\r\n    this.other = cfg.other;\r\n    this.name = cfg.name as any;\r\n    this.onExecute = cfg.onExecute;\r\n    this.ordered = cfg.ordered ?? false;\r\n    this.triggerType = cfg.triggerType ?? \"OneByOneGlobal\";\r\n  }\r\n}"]}